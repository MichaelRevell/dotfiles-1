#$Id$: vim-keys.conf,v 1.2 2010-09-18 09:36:15 nicm Exp $
#
# vim-keys.conf, v1.2 2010/09/12
#
# By Daniel Thau.  Public domain.
#
# This configuration file binds many vi- and vim-like bindings to the
# appropriate tmux key bindings.  Note that for many key bindings there is no
# tmux analogue.  This is intended for tmux 1.3, which handles pane selection
# differently from the previous versions

#change command sequence to alt-`
unbind C-b
set -g prefix C-j 
# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind s split-window -v
bind v split-window -h

# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind < resize-pane -L 1
bind > resize-pane -R 1
bind - resize-pane -D 1
bind + resize-pane -U 1

# bind : to command-prompt like vim
# this is the default in tmux already
#bind : command-prompt

# vi-style controls for copy mode
setw -g mode-keys vi

set -g default-command zsh
set -g display-time 3000
#number windows starting from 1
set -g base-index 1

# Bind function keys.
bind -n F1 select-window -t 1
bind -n F2 select-window -t 2
bind -n F3 select-window -t 3
bind -n F4 select-window -t 4
bind -n F5 select-window -t 5
bind -n F6 select-window -t 6
bind -n F7 select-window -t 7
bind -n F8 select-window -t 8
bind-key b set-option status
bind '~' split-window "exec htop"

#scrollback buffer n lines
set -g history-limit 5000

#listen for activity on all windows
set -g bell-action any

#onscreen time for display panes in ms
set -g display-panes-time 2000

#wm window titles string (uses statusbar variables)
set -g set-titles-string "tmux.#I.#W"

#ctrl-pgup & pgdn work in vim
set -g xterm-keys on

#select-window -t 1
#highlight active window
set-window-option -g window-status-current-bg red
# Rather than constraining window size to the maximum size of any client 
# connected to the *session*, constrain window size to the maximum size of any 
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on
